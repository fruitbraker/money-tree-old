/*
 * This file is generated by jOOQ.
 */
package generated.com.moneytree.persist.db.generated.tables;


import generated.com.moneytree.persist.db.generated.Keys;
import generated.com.moneytree.persist.db.generated.Mtdev;
import generated.com.moneytree.persist.db.generated.tables.records.IncomeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Income extends TableImpl<IncomeRecord> {

    private static final long serialVersionUID = -330311976;

    /**
     * The reference instance of <code>mtdev.income</code>
     */
    public static final Income INCOME = new Income();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IncomeRecord> getRecordType() {
        return IncomeRecord.class;
    }

    /**
     * The column <code>mtdev.income.income_id</code>.
     */
    public final TableField<IncomeRecord, Long> INCOME_ID = createField(DSL.name("income_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mtdev.income.income_source</code>.
     */
    public final TableField<IncomeRecord, String> INCOME_SOURCE = createField(DSL.name("income_source"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>mtdev.income.income_category</code>.
     */
    public final TableField<IncomeRecord, String> INCOME_CATEGORY = createField(DSL.name("income_category"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<IncomeRecord, Object> TRANSACTION_AMOUNT = createField(DSL.name("transaction_amount"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"money\"").nullable(false), this, "");

    /**
     * The column <code>mtdev.income.transaction_date</code>.
     */
    public final TableField<IncomeRecord, Timestamp> TRANSACTION_DATE = createField(DSL.name("transaction_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>mtdev.income.metadata</code>.
     */
    public final TableField<IncomeRecord, Long> METADATA = createField(DSL.name("metadata"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>mtdev.income</code> table reference
     */
    public Income() {
        this(DSL.name("income"), null);
    }

    /**
     * Create an aliased <code>mtdev.income</code> table reference
     */
    public Income(String alias) {
        this(DSL.name(alias), INCOME);
    }

    /**
     * Create an aliased <code>mtdev.income</code> table reference
     */
    public Income(Name alias) {
        this(alias, INCOME);
    }

    private Income(Name alias, Table<IncomeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Income(Name alias, Table<IncomeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Income(Table<O> child, ForeignKey<O, IncomeRecord> key) {
        super(child, key, INCOME);
    }

    @Override
    public Schema getSchema() {
        return Mtdev.MTDEV;
    }

    @Override
    public UniqueKey<IncomeRecord> getPrimaryKey() {
        return Keys.INCOME_PKEY;
    }

    @Override
    public List<UniqueKey<IncomeRecord>> getKeys() {
        return Arrays.<UniqueKey<IncomeRecord>>asList(Keys.INCOME_PKEY);
    }

    @Override
    public List<ForeignKey<IncomeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IncomeRecord, ?>>asList(Keys.INCOME__INCOME_INCOME_CATEGORY_FKEY, Keys.INCOME__INCOME_METADATA_FKEY);
    }

    public IncomeCategory incomeCategory() {
        return new IncomeCategory(this, Keys.INCOME__INCOME_INCOME_CATEGORY_FKEY);
    }

    public Metadata metadata() {
        return new Metadata(this, Keys.INCOME__INCOME_METADATA_FKEY);
    }

    @Override
    public Income as(String alias) {
        return new Income(DSL.name(alias), this);
    }

    @Override
    public Income as(Name alias) {
        return new Income(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Income rename(String name) {
        return new Income(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Income rename(Name name) {
        return new Income(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, Object, Timestamp, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
