/*
 * This file is generated by jOOQ.
 */
package generated.com.moneytree.persist.db.generated.tables;


import generated.com.moneytree.persist.db.generated.Keys;
import generated.com.moneytree.persist.db.generated.Mtdev;
import generated.com.moneytree.persist.db.generated.tables.records.ExpenseCategoryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExpenseCategory extends TableImpl<ExpenseCategoryRecord> {

    private static final long serialVersionUID = -45233673;

    /**
     * The reference instance of <code>mtdev.expense_category</code>
     */
    public static final ExpenseCategory EXPENSE_CATEGORY = new ExpenseCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExpenseCategoryRecord> getRecordType() {
        return ExpenseCategoryRecord.class;
    }

    /**
     * The column <code>mtdev.expense_category.expense_category_id</code>.
     */
    public final TableField<ExpenseCategoryRecord, String> EXPENSE_CATEGORY_ID = createField(DSL.name("expense_category_id"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * Create a <code>mtdev.expense_category</code> table reference
     */
    public ExpenseCategory() {
        this(DSL.name("expense_category"), null);
    }

    /**
     * Create an aliased <code>mtdev.expense_category</code> table reference
     */
    public ExpenseCategory(String alias) {
        this(DSL.name(alias), EXPENSE_CATEGORY);
    }

    /**
     * Create an aliased <code>mtdev.expense_category</code> table reference
     */
    public ExpenseCategory(Name alias) {
        this(alias, EXPENSE_CATEGORY);
    }

    private ExpenseCategory(Name alias, Table<ExpenseCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExpenseCategory(Name alias, Table<ExpenseCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ExpenseCategory(Table<O> child, ForeignKey<O, ExpenseCategoryRecord> key) {
        super(child, key, EXPENSE_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return Mtdev.MTDEV;
    }

    @Override
    public UniqueKey<ExpenseCategoryRecord> getPrimaryKey() {
        return Keys.EXPENSE_CATEGORY_PKEY;
    }

    @Override
    public List<UniqueKey<ExpenseCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<ExpenseCategoryRecord>>asList(Keys.EXPENSE_CATEGORY_PKEY);
    }

    @Override
    public ExpenseCategory as(String alias) {
        return new ExpenseCategory(DSL.name(alias), this);
    }

    @Override
    public ExpenseCategory as(Name alias) {
        return new ExpenseCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExpenseCategory rename(String name) {
        return new ExpenseCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExpenseCategory rename(Name name) {
        return new ExpenseCategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
